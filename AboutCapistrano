## About Capistrano

Working with a capistrano was a interesting thing
As a Capistrano is developed in the ruby all the codes are ruby-based and need ruby-dependecies like ruby-version, rvm/chruby .
It uses a SSH protocol while deploying. it executes the tasks serially. hooks are used while creating a task
Simply understanding a capistrano, if we `cap install ` we will get a structure like this in each project.

├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks

1. The deploy.rb is a place where the configuration common to each environment can be specified, normally the repository URL and the user as whom to 
deploy are specified here.
2.config/deploy/(production/staging).rb -- configuration variable sepecific to your stage. 
3.lib/capistrano/tasks - consists the tasks that is executed serially while deploying.
4.Capfile - including the tasks 


The folder structure made by capistrano in remote server

├── current -> /$pwd/releases/20150120114500/
├── releases
│   ├── 20150080072500
│   ├── 20150090083000
│   ├── 20150100093500
│   ├── 20150110104000
│   └── 20150120114500
├── repo
│   └── <VCS related data>
├── revisions.log
└── shared
    └── <linked_files and linked_dirs>

1. current- it is the symlink of the latest release
2. releases- it consists a no of releases, we can set a number to keep the number of release. advantages for rollback 
3. revision.log - it consists the log that tells who deployed which branch with a latest revision.

commands
1. cap production/staging deploy 
   i.   - cap is capistrano
   ii.  - production is the stage [our environment] reads [(production/staging).rb]
   iii. - deploy is the mentioning the file with deploy.rb 
 i.e - that means  litterally, capistrano deploy in production/staging reading a deploy.rb file
2. cap -T
   - shows the task available
3. lots of the task that can rollback /revert , kill the tasks 
